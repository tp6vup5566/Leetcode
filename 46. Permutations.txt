Solution 1:Backtracking

class Solution {
public:
    vector<vector<int> > permute(vector<int> &num) {
	    vector<vector<int> > result;
	    
	    permuteRecursive(num, 0, result);
	    return result;
    }
    
    // permute num[begin..end]
    // invariant: num[0..begin-1] have been fixed/permuted
	void permuteRecursive(vector<int> &num, int begin, vector<vector<int> > &result)	{
		if (begin >= num.size()) {
		    // one permutation instance
		    result.push_back(num);
		    return;
		}
		
		for (int i = begin; i < num.size(); i++) {
		    swap(num[begin], num[i]);
		    permuteRecursive(num, begin + 1, result);
		    // reset
		    swap(num[begin], num[i]);
		}
    }
};

Solution 2:Dfs

class Solution {
public:
    vector<int> visted;
    vector<int> path;
    vector<vector<int>> permute(vector<int> &num) {
	    vector<vector<int>> result;
	    visted.resize(num.size(),0);
	    dfs(num, 0, result);
	    return result;
    }

    void dfs(vector<int> num,int begin,vector<vector<int>> &result){
        if(begin>=num.size()){
            result.push_back(path);
            return;
        }
        for(int i=0;i<num.size();i++){
            if(visted[i]) continue;
            visted[i]++;
            path.push_back(num[i]);
            dfs(num,begin+1,result);
            visted[i]--;
            path.pop_back();
        }
    }
};

