/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

class Solution {
public:
    vector<TreeNode*> getPath(TreeNode* root,TreeNode* target){
        vector<TreeNode*> path;
        TreeNode* node=root;
        while(node!=target){
            path.push_back(node);
            if(target->val<node->val){
                node=node->left;
            }
            else{
                node=node->right;
            }
        }
        path.push_back(node);
        return path;
    }
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        vector<TreeNode*> path_p = getPath(root, p);
        vector<TreeNode*> path_q = getPath(root, q);
        int i=0;
        TreeNode* ancestor;
        while(i<path_p.size() && i<path_q.size()){
            if(path_p[i]==path_q[i] ){
                ancestor=path_p[i];
                i++;
            }
            else{
                break;
            }
        }
        return ancestor;
    }
};