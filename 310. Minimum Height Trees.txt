class Solution {
public:
    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {
        if (n == 1) return {0};
        unordered_map<int,vector<int>> neighbour;
        queue<int> q;
        vector<int> degree(n, 0);
        
        // 構造鄰居關係和度數
        for (int i = 0; i < edges.size(); i++) {
            degree[edges[i][0]]++;
            degree[edges[i][1]]++;
            neighbour[edges[i][0]].push_back(edges[i][1]);
            neighbour[edges[i][1]].push_back(edges[i][0]);
        }
        
        // 將度數為 1 的節點加入隊列
        for (int i = 0; i < n; i++) {
            if (degree[i] == 1) q.push(i);
        }
        
        vector<int> ans;
        // 開始 BFS
        while (!q.empty()) {
            int size = q.size();
            ans.clear();  // 清空答案
            for (int i = 0; i < size; i++) {
                int tmp = q.front();
                q.pop();
                ans.push_back(tmp);  // 將當前層次的節點加入答案
                degree[tmp]--;
                for (int j = 0; j < neighbour[tmp].size(); j++) {
                    degree[neighbour[tmp][j]]--;
                    if (degree[neighbour[tmp][j]] == 1) {
                        q.push(neighbour[tmp][j]);
                    }
                }
            }
        }
        return ans;
    }
};
