Solution 1:Dfs

class Solution {
public:
    vector<vector<int>> combine(int n, int k) {
        vector<vector<int>> result;
        vector<int> combination;
        dfs(n, k, 1, combination, result);
        return result;
    }
    
    void dfs(int n, int k, int start, vector<int>& combination, vector<vector<int>>& result) {
        if (combination.size() == k) {
            result.push_back(combination);
            return;
        }
        
        for (int i = start; i <= n; ++i) {
            combination.push_back(i);
            dfs(n, k, i + 1, combination, result);	//一次遞迴時應該從 i + 1 開始選擇，這樣可以確保不會重複選擇相同的數字，並且保持組合中的數字按升序排列。
            combination.pop_back();
        }
    }
};

Solution 2:Iterative

class Solution {
public:
	vector<vector<int>> combine(int n, int k) {
		vector<vector<int>> result;
		int i = 0;
		vector<int> p(k, 0);
		while (i >= 0) {
			p[i]++;
			if (p[i] > n) --i;
			else if (i == k - 1) result.push_back(p);
			else {
			    ++i;
			    p[i] = p[i - 1];
			}
		}
		return result;
	}
};