Solution 1:Dfs

class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]=='1'){
                    num_islands++;
                    dfs(grid,i,j);
                }
            }
        }
        return num_islands;
    }
    void dfs(vector<vector<char>>& grid,int i,int j){
        int direction[4][2]={{-1,0},{0,-1},{0,1},{1,0}};
        if(i<0 || i>=grid.size() || j<0 || j>=grid[0].size() || grid[i][j]=='0') return;
        grid[i][j]='0';
        for(int k=0;k<4;k++){
            dfs(grid,i+direction[k][0],j+direction[k][1]);
        }
    }
private:
    int num_islands=0;
};

Solution 2:Bfs

class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        int num_islands=0;
        queue<pair<int,int>> q;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]=='1'){
                    num_islands++;
                    grid[i][j]='0';
                    q.push(make_pair(i,j));
                    while(!q.empty()){
                        int direction[4][2]={{-1,0},{0,-1},{0,1},{1,0}};
                        auto q_tmp=q.front();
                        q.pop();
                        for(int k=0;k<4;k++){
                            int newX=q_tmp.first+direction[k][0];
                            int newY=q_tmp.second+direction[k][1];
                            if(newX>=0 && newX<n && newY>=0 && newY<m && grid[newX][newY]=='1'){
                                q.push({newX,newY});
                                grid[newX][newY]='0';
                            }
                        }
                    }
                }
            }
        }
        return num_islands;
    }
};


